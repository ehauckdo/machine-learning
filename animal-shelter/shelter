#! /usr/bin/env python
import pandas
import math
import operator
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import cross_validation

outcomes = { "Adoption": 0, "Died": 1, "Euthanasia": 2,
    "Return_to_owner":3, "Transfer": 4}
def get_outcome_probability(id_animal, outcome_type):
    return predictions[id_animal-1][outcomes[outcome_type]]

def generate_submission(dataframe):
    submission = pandas.DataFrame({
        "ID": dataframe["ID"],
        "Adoption": dataframe["Adoption"],
        "Died": dataframe["Died"],
        "Euthanasia": dataframe["Euthanasia"],
        "Return_to_owner": dataframe["Return_to_owner"],
        "Transfer": dataframe["Transfer"]
    })
    
    submission = submission[["ID", "Adoption", "Died", "Euthanasia", "Return_to_owner", "Transfer"]]
    submission.to_csv("kaggle.csv", index=False)

def perform_random_forest_proba(train_set, train_target, test_set, predictors, estimators=178, splits=6, leafs=4):
    alg = RandomForestClassifier(random_state=1, n_estimators=estimators, min_samples_split=splits, min_samples_leaf=leafs)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict_proba(test_set[predictors].astype(float))
    return predictions

def perform_gradient_boosting_proba(train_set, train_target, test_set, predictors, estimators=30, depth=3):
    alg = GradientBoostingClassifier(random_state=1, n_estimators=estimators, max_depth=depth)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict_proba(test_set[predictors].astype(float))
    return predictions;

def perform_ensemble(algorithms, train_set, train_target, test_set):
    total_predictions = []
    for algorithm, predictor in algorithms:

        algorithm.fit(train_set[predictor], train_target)
        prediction = algorithm.predict_proba(test_set[predictor].astype(float))
        total_predictions.append(prediction)

    # average scores 
    predictions = (total_predictions[0]*1  + total_predictions[1]*1)/ 2

    return predictions

def clean_data(dataframe):

    # formatting AnimalType column
    dataframe.loc[dataframe["AnimalType"] == "Dog", "AnimalType"] = 0
    dataframe.loc[dataframe["AnimalType"] == "Cat", "AnimalType"] = 1

    # filling SexuponOutcome column
    # we are filling with the most common result
    dataframe["SexuponOutcome"] = dataframe["SexuponOutcome"].fillna("Neutered Male")

    # formatting SexuponOutcome column
    dataframe.loc[dataframe["SexuponOutcome"] == "Neutered Male", "SexuponOutcome"] = 0
    dataframe.loc[dataframe["SexuponOutcome"] == "Spayed Female", "SexuponOutcome"] = 1
    dataframe.loc[dataframe["SexuponOutcome"] == "Intact Male", "SexuponOutcome"] = 2
    dataframe.loc[dataframe["SexuponOutcome"] == "Intact Female", "SexuponOutcome"] = 3
    dataframe.loc[dataframe["SexuponOutcome"] == "Unknown", "SexuponOutcome"] = 4
   
    # formatting OutcomeType column
    # only for training set
    try: 
        dataframe.loc[dataframe["OutcomeType"] == "Adoption", "OutcomeType"] = 0 
        dataframe.loc[dataframe["OutcomeType"] == "Died", "OutcomeType"] = 1
        dataframe.loc[dataframe["OutcomeType"] == "Euthanasia", "OutcomeType"] = 2
        dataframe.loc[dataframe["OutcomeType"] == "Return_to_owner", "OutcomeType"] = 3
        dataframe.loc[dataframe["OutcomeType"] == "Transfer", "OutcomeType"] = 4 
        dataframe["OutcomeType"] = dataframe["OutcomeType"].astype(int)
    except:
        pass

    # filling AgeuponOutcome column
    # we are considering that an animal with missing age has 0 years
    dataframe["AgeuponOutcome"] = dataframe["AgeuponOutcome"].fillna(0)
   
    # formatting AgeuponOutcome column
    # terrible hack, improve this later
    def get_age(animal):
        age = str(animal["AgeuponOutcome"])
        try:
            if 'week' in age:
                return 0
            elif 'month' in age:
                value = int(age.split()[0])*(-1)
                if value < -6:
                    return -6
                return value
            else:
                return age.split()[0]
        except:
            return -1

    dataframe["AgeuponOutcome"] = dataframe.apply(get_age, axis=1)
    dataframe["AgeuponOutcome"] = dataframe["AgeuponOutcome"].astype(int)
    

    # formatting Breed column
    # can be improved, but works
    breed_mapping = {}
    def get_breed(animal):
        breed = animal["Breed"].split(",")[0]
        try:
            breed_mapping[breed] += 1
        except KeyError:
            breed_mapping[breed] = 1
        return breed_mapping[breed]    

    def apply_breed(animal):
        breed = animal["Breed"].split(",")[0]
        return breed_mapping[breed]

    dataframe.apply(get_breed, axis=1)
    dataframe['Breed'] = dataframe.apply(apply_breed, axis=1)
    dataframe.loc[dataframe["Breed"] < 100, "Breed"] = 1

    # formatting Color column
    # can be improved, but works
    color_mapping = {} 
    def get_color(animal):
        color = animal['Color'].split(",")[0]  
        try:
            color_mapping[color] += 1
        except KeyError:
            color_mapping[color] = 1 
        return color_mapping[color]    

    def apply_color(animal):
        color = animal['Color'].split(",")[0]  
        return color_mapping[color]

    dataframe.apply(get_color, axis=1)
    dataframe['Color'] = dataframe.apply(apply_color, axis=1)
    dataframe.loc[dataframe["Color"] < 100, "Color"] = 1


shelter = pandas.read_csv("train.csv")
test = pandas.read_csv("test.csv")

#print(shelter.info())
#print("-------------------")
#print(test.info())

clean_data(shelter)
clean_data(test)

#print(shelter["SexuponOutcome"].unique())
#print(test["SexuponOutcome"].unique())
#print(shelter["Color"].value_counts())
#print(test["SexuponOutcome"].value_counts())

#predictions = perform_random_forest_proba(shelter, shelter["OutcomeType"], test, ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color"])
predictions = perform_gradient_boosting_proba(shelter, shelter["OutcomeType"], test, ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color"])

test["Adoption"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Adoption"])
test["Died"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Died"])
test["Euthanasia"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Euthanasia"])
test["Return_to_owner"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Return_to_owner"])
test["Transfer"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Transfer"])

shelter.to_csv("train_cleaned.csv", index=False)
test.to_csv("test_cleaned.csv", index=False)
generate_submission(test)
