#! /usr/bin/env python
import pandas
import math
import operator
import sys
from sklearn.cross_validation import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import cross_validation

outcomes = { "Adoption": 0, "Died": 1, "Euthanasia": 2,
    "Return_to_owner":3, "Transfer": 4}
def get_outcome_probability(id_animal, outcome_type):
    return predictions[id_animal-1][outcomes[outcome_type]]

def get_outcome_voting_result(id_animal, outcome_type):
    return predictions[id_animal-1]

def generate_submission(dataframe):
    submission = pandas.DataFrame({
        "ID": dataframe["ID"],
        "Adoption": dataframe["Adoption"],
        "Died": dataframe["Died"],
        "Euthanasia": dataframe["Euthanasia"],
        "Return_to_owner": dataframe["Return_to_owner"],
        "Transfer": dataframe["Transfer"]
    })
    
    submission = submission[["ID", "Adoption", "Died", "Euthanasia", "Return_to_owner", "Transfer"]]
    submission.to_csv("kaggle.csv", index=False)

def perform_random_forest_proba(train_set, train_target, test_set, predictors, estimators=178, splits=6, leafs=4):
    alg = RandomForestClassifier(random_state=1, n_estimators=estimators, min_samples_split=splits, min_samples_leaf=leafs)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict_proba(test_set[predictors].astype(float))
    print("RF:") 
    for i in predictions[0]:
        print("%.2f" % i)
    return predictions

def perform_gradient_boosting_proba(train_set, train_target, test_set, predictors, estimators=30, depth=3):
    alg = GradientBoostingClassifier(random_state=1, n_estimators=estimators, max_depth=depth)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict_proba(test_set[predictors].astype(float))
    print("GB:") 
    for i in predictions[0]:
        print("%.2f" % i)
    return predictions;

def perform_ensemble_vote(algorithms, train_set, train_target, test_set, use_subsets=True, random_subsets=True, subset_size=0.7):
    
    total_predictions = []
    if use_subsets is True:
        train_subsets = []
        if random_subsets is True:
            for i in range(len(algorithms)):
                train_subsets.append(train_set.sample(frac=subset_size))
        else:
            folds = KFold(train_set.shape[0], n_folds=len(algorithms), random_state=1)
            for train, test in folds:
                train_subsets.append(train_set.iloc[test,:])

        for algorithm, predictor in (algorithms):
            subset = train_subsets.pop()
            algorithm.fit(subset[predictor], subset["OutcomeType"])
            prediction = algorithm.predict(test_set[predictor].astype(float))
            total_predictions.append(prediction)
    
    else:
        for algorithm, predictor in (algorithms):
            algorithm.fit(train_set[predictor], train_target)
            prediction = algorithm.predict(test_set[predictor].astype(float))
            total_predictions.append(prediction)
 
    predictions = [];
    votes = []
    for i in range(len(test_set.index)):
        votes.append([0,0,0,0,0])

    for prediction in total_predictions:
        for i in range(len(prediction)):
            votes[i][prediction[i]] +=1            
    
    for i in range(len(votes)):
        print(i, votes[i]) 
        maxi = votes[i].index(max(votes[i]))
        print("Max:",maxi)
        predictions.append(maxi)
    
    print("Predictions:")
    for i in range (len(predictions)):
        print(i, predictions[i])
    
    return predictions

def perform_ensemble_proba(algorithms, train_set, train_target, test_set, use_subsets=True, random_subsets=True, subset_size=0.7):

    total_predictions = []
    if use_subsets is True:
        train_subsets = []
        if random_subsets is True:
            for i in range(len(algorithms)):
                train_subsets.append(train_set.sample(frac=subset_size))
        else:
            folds = KFold(train_set.shape[0], n_folds=len(algorithms), random_state=1)
            for train, test in folds:
                train_subsets.append(train_set.iloc[test,:])

        for algorithm, predictor in (algorithms):
            subset = train_subsets.pop()
            algorithm.fit(subset[predictor], subset["OutcomeType"])
            prediction = algorithm.predict_proba(test_set[predictor].astype(float))
            total_predictions.append(prediction)
    
    else:
        for algorithm, predictor in (algorithms):
            algorithm.fit(train_set[predictor], train_target)
            prediction = algorithm.predict_proba(test_set[predictor].astype(float))
            total_predictions.append(prediction)
  
    # average scores 
    predictions = 0;
    for prediction in total_predictions:
        predictions += prediction
    predictions = predictions/len(total_predictions)
    
    return predictions

def clean_data(dataframe):

    # formatting AnimalType column
    dataframe.loc[dataframe["AnimalType"] == "Dog", "AnimalType"] = 0
    dataframe.loc[dataframe["AnimalType"] == "Cat", "AnimalType"] = 1

    # filling SexuponOutcome column
    # we are filling with the most common result
    dataframe["SexuponOutcome"] = dataframe["SexuponOutcome"].fillna("Neutered Male")

    # formatting SexuponOutcome column
    dataframe.loc[dataframe["SexuponOutcome"] == "Neutered Male", "SexuponOutcome"] = 0
    dataframe.loc[dataframe["SexuponOutcome"] == "Spayed Female", "SexuponOutcome"] = 1
    dataframe.loc[dataframe["SexuponOutcome"] == "Intact Male", "SexuponOutcome"] = 2
    dataframe.loc[dataframe["SexuponOutcome"] == "Intact Female", "SexuponOutcome"] = 3
    dataframe.loc[dataframe["SexuponOutcome"] == "Unknown", "SexuponOutcome"] = 4
   
    # formatting OutcomeType column
    # only for training set
    try: 
        dataframe.loc[dataframe["OutcomeType"] == "Adoption", "OutcomeType"] = 0 
        dataframe.loc[dataframe["OutcomeType"] == "Died", "OutcomeType"] = 1
        dataframe.loc[dataframe["OutcomeType"] == "Euthanasia", "OutcomeType"] = 2
        dataframe.loc[dataframe["OutcomeType"] == "Return_to_owner", "OutcomeType"] = 3
        dataframe.loc[dataframe["OutcomeType"] == "Transfer", "OutcomeType"] = 4 
        dataframe["OutcomeType"] = dataframe["OutcomeType"].astype(int)
    except:
        pass

    # filling AgeuponOutcome column
    # we are considering that an animal with missing age has 0 years
    dataframe["AgeuponOutcome"] = dataframe["AgeuponOutcome"].fillna(0)
   
    # formatting AgeuponOutcome column
    # terrible hack, improve this later
    def get_age(animal):
        age = str(animal["AgeuponOutcome"])
        try:
            if 'week' in age:
                return 0
            elif 'month' in age:
                value = int(age.split()[0])*(-1)
                if value < -6:
                    return -6
                return value
            else:
                return age.split()[0]
        except:
            return -1

    dataframe["AgeuponOutcome"] = dataframe.apply(get_age, axis=1)
    dataframe["AgeuponOutcome"] = dataframe["AgeuponOutcome"].astype(int)
   
    # separation between Mixed and more Pure races 
    def is_mixed(animal):
        breed = animal["Breed"]
        if "Mix" in breed or "/" in breed:
            return 1
        else:
            return 0

    dataframe["Pedigree"] = dataframe.apply(is_mixed, axis=1)

    # formatting Breed column
    # can be improved, but works
    breed_mapping = {}
    def get_breed(animal):
        breed = animal["Breed"].split(",")[0]
        try:
            breed_mapping[breed] += 1
        except KeyError:
            breed_mapping[breed] = 1
        return breed_mapping[breed]    

    def apply_breed(animal):
        breed = animal["Breed"].split(",")[0]
        return breed_mapping[breed]

    dataframe.apply(get_breed, axis=1)
    dataframe['Breed'] = dataframe.apply(apply_breed, axis=1)
    dataframe.loc[dataframe["Breed"] < 100, "Breed"] = 1

    # formatting Color column
    # can be improved, but works
    color_mapping = {} 
    def get_color(animal):
        color = animal['Color'].split(",")[0]  
        try:
            color_mapping[color] += 1
        except KeyError:
            color_mapping[color] = 1 
        return color_mapping[color]    

    def apply_color(animal):
        color = animal['Color'].split(",")[0]  
        return color_mapping[color]

    dataframe.apply(get_color, axis=1)
    dataframe['Color'] = dataframe.apply(apply_color, axis=1)
    dataframe.loc[dataframe["Color"] < 100, "Color"] = 1

    def get_identity(animal):
        name = animal['Name']
        if pandas.isnull(name):
            return 0 
        else:
            return 1
    dataframe['Identity'] = dataframe.apply(get_identity, axis=1)

    dataframe.drop('Name', axis=1, inplace=True)



shelter = pandas.read_csv("train.csv")
test = pandas.read_csv("test.csv")

#print(shelter.info())
#print("-------------------")
#print(test.info())

clean_data(shelter)
clean_data(test)

algorithms = []
for i in range(30):
    algorithms.append([GradientBoostingClassifier(random_state=1, n_estimators=35, max_depth=3), ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color", "Identity", "Pedigree"]])
for i in range(30):
    algorithms.append([RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=3), ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color", "Identity", "Pedigree"]])

#print(shelter["SexuponOutcome"].unique())
#print(test["SexuponOutcome"].unique())
#print(shelter["Color"].value_counts())
#print(test["SexuponOutcome"].value_counts())

#predictions = perform_random_forest_proba(shelter, shelter["OutcomeType"], test, ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color"])
#predictions = perform_gradient_boosting_proba(shelter, shelter["OutcomeType"], test, ["AnimalType", "SexuponOutcome", "AgeuponOutcome", "Breed", "Color"])
predictions = perform_ensemble_vote(algorithms, shelter, shelter["OutcomeType"], test)


test["Adoption"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Adoption"])
test["Died"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Died"])
test["Euthanasia"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Euthanasia"])
test["Return_to_owner"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Return_to_owner"])
test["Transfer"] = test[["ID"]].apply(get_outcome_probability, axis=1, args=["Transfer"])


#shelter.to_csv("train_cleaned.csv", index=False)
#test.to_csv("test_cleaned.csv", index=False)
#generate_submission(test)
