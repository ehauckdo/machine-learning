#! /usr/bin/env python

import pandas
import numpy
import re
import operator
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.cross_validation import KFold
from sklearn import cross_validation
import matplotlib.pyplot as plt

# feature generation functions
def get_title(name):
    title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 7, "Mlle": 8, "Mme": 8, "Don": 9, "Lady": 10, "Countess": 10, "Jonkheer": 10, "Sir": 9, "Capt": 7, "Ms": 2, "Dona": 10}
    title_search = re.search('([A-Za-z]+)\.', name)
    if title_search:
        return title_mapping[title_search.group(1)]
    return ""

family_id_mapping = {}

def get_family_id(row):
    last_name = row["Name"].split(",")[0]
    family_id = "{0}{1}".format(last_name, row["FamilySize"])
    if family_id not in family_id_mapping:
        if len(family_id_mapping) == 0:
            current_id = 1
        else:
            current_id = (max(family_id_mapping.items(), key=operator.itemgetter(1))[1] + 1)
        family_id_mapping[family_id] = current_id
    return family_id_mapping[family_id]

# algorithms
def perform_logistic_regression(train_set, train_target, test_set):
    alg = LogisticRegression(random_state=1)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    #scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    #print("LR scores2: "+str(scoresLR.mean()))
    return predictions

def perform_random_forest(train_set, train_target, test_set):
    alg = RandomForestClassifier(random_state=1, n_estimators=100, min_samples_split=6, min_samples_leaf=4)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    #scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    #print("RF scores: "+str(scoresRF.mean()))
    return predictions;

def perform_gradient_boosting(train_set, train_target, test_set):
    alg = GradientBoostingClassifier(random_state=1, n_estimators=30, max_depth=3)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    #scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    #print("GB scores: "+str(scores.mean()))
    return predictions;

# util functions
def print_info(dataframe):
    print(dataframe.describe())
    print(dataframe.shape)

def generate_submission(dataframe, predictions):
    submission = pandas.DataFrame({
        "PassengerId": dataframe["PassengerId"],
        "Survived": predictions
    })
    submission.to_csv("kaggle.csv", index=False)

def feature_selection(dataframe, predictions):
    selector = SelectKBest(f_classif, k=5)
    selector.fit(dataframe[predictors], predictions)

    # Get the raw p-values for each feature, and transform from p-values into scores
    scores = numpy.log10(selector.pvalues_)
    
    plt.bar(range(len(predictors)), scores)
    plt.xticks(range(len(predictors)), predictors, rotation='vertical')
    plt.show()
    
def titanic_clean_data(dataframe):

    # fill mising values
    dataframe["Age"] = dataframe["Age"].fillna(dataframe["Age"].median())
    dataframe["Fare"] = dataframe["Fare"].fillna(dataframe["Fare"].median())
    dataframe["Embarked"] = dataframe["Embarked"].fillna("S")

    # change non numeric columns to numeric
    dataframe.loc[dataframe["Sex"] == "male", "Sex"] = 0
    dataframe.loc[dataframe["Sex"] == "female", "Sex"] = 1
    dataframe.loc[dataframe["Embarked"] == "S", "Embarked"] = 0
    dataframe.loc[dataframe["Embarked"] == "C", "Embarked"] = 1
    dataframe.loc[dataframe["Embarked"] == "Q", "Embarked"] = 2

    # generating new features
    dataframe["FamilySize"] = dataframe["SibSp"] + dataframe["Parch"]
    dataframe["NameLength"] = dataframe["Name"].apply(lambda x: len(x))
    dataframe["Title"] = dataframe["Name"].apply(get_title)
    family_ids = dataframe.apply(get_family_id, axis=1)
    family_ids[dataframe["FamilySize"] < 3] = -1
    dataframe["FamilyId"] = family_ids

# read csv
titanic = pandas.read_csv("train.csv")
test = pandas.read_csv("test.csv")

titanic_clean_data(titanic)
titanic_clean_data(test)

predictors = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "FamilySize", "NameLength", "Title", "FamilyId"]
predictors_new = ["Pclass", "Sex", "Fare", "Title"]

#perform_logistic_regression(titanic, titanic["Survived"], test)
#perform_random_forest(titanic, titanic["Survived"], test)
#perform_gradient_boosting(titanic, titanic["Survived"], test)

algorithms = [
    [LogisticRegression(random_state=1), ["Pclass", "Sex", "Fare", "FamilySize", "Title", "Age" ,"Embarked"]],
    [GradientBoostingClassifier(random_state=1, n_estimators=35, max_depth=3), ["Pclass", "Sex", "Age", "Fare", "FamilySize", "Title", "FamilyId", "Embarked"]]
    #,[RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=3), ["Pclass", "Sex", "Age", "Fare", "FamilySize", "Title", "FamilyId", "Embarked"]]
]

total_predictions = []
for algorithm, predictor in algorithms:
    algorithm.fit(titanic[predictors], titanic["Survived"])
    prediction = algorithm.predict_proba(test[predictors].astype(float))[:,1]
    total_predictions.append(prediction)

# gradient supposedly generates better predictions, so weight it higher
predictions = ((total_predictions[0] * 1 ) + (total_predictions[1] * 3)) / 4

predictions[predictions <= .5] = 0
predictions[predictions > .5] = 1
predictions = predictions.astype(int)

generate_submission(test, predictions)

