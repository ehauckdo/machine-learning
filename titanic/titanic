#! /usr/bin/env python

import pandas
import numpy
import re
import operator
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.cross_validation import KFold
from sklearn import cross_validation
from sklearn.preprocessing import StandardScaler
import seaborn as sns
sns.set_style('whitegrid')
import matplotlib.pyplot as plt

# feature generation functions
def get_title(name):
    title_mapping = {"Mr": 1, "Miss": 2, "Mlle": 2, "Ms": 2, "Mrs": 3, "Mme": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 7, "Don": 9, "Lady": 10, "Countess": 10, "Jonkheer": 10, "Sir": 9, "Capt": 7, "Ms": 2, "Dona": 10}
    title_search = re.search('([A-Za-z]+)\.', name)
    if title_search:
        return title_mapping[title_search.group(1)]
    return ""

family_id_mapping = {}

def get_family_id(row):
    last_name = row["Name"].split(",")[0]
    family_id = "{0}{1}".format(last_name, row["FamilySize"])
    if family_id not in family_id_mapping:
        if len(family_id_mapping) == 0:
            current_id = 1
        else:
            current_id = (max(family_id_mapping.items(), key=operator.itemgetter(1))[1] + 1)
        family_id_mapping[family_id] = current_id
    return family_id_mapping[family_id]

# algorithms
def perform_logistic_regression(train_set, train_target, test_set):
    alg = LogisticRegression(random_state=1)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    print("LR scores: "+str(scores.mean()))
    return predictions

def perform_random_forest(train_set, train_target, test_set, estimators=178, splits=6, leafs=4):
    alg = RandomForestClassifier(random_state=1, n_estimators=estimators, min_samples_split=splits, min_samples_leaf=leafs)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    print("RF scores: "+str(scores.mean()))
    return predictions;

def perform_gradient_boosting(train_set, train_target, test_set, estimators=30, depth=3):
    alg = GradientBoostingClassifier(random_state=1, n_estimators=estimators, max_depth=depth)
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    print("GB scores: "+str(scores.mean()))
    return predictions;


def perform_SVM(train_set, train_target, test_set):
    alg = SVC()
    alg.fit(train_set[predictors], train_target)
    predictions = alg.predict(test_set[predictors])
    scores = cross_validation.cross_val_score(alg, train_set[predictors], train_target, cv=3)
    print("SVM scores: "+str(scores.mean()))
    return predictions

def score_ensemble(algorithms, train_set, train_target):
    
    kf = KFold(titanic.shape[0], n_folds = 3, random_state=1)

    predictions = []
    for train, test in kf:

        full_test_predictions = []
        for alg, predictors in algorithms:

            fold_train_target = train_target.iloc[train]
            fold_train_predictors = train_set[predictors].iloc[train,:]

            alg.fit(fold_train_predictors, fold_train_target)

            # predict on the test fold
            # alg.predict will give the labels of the classified samples (i.e. 0 or 1)
            # alg.predict_proba will give the probability of a sample belonging to a category (i.e. 0~1)
            probability_array = alg.predict_proba(train_set[predictors].iloc[test,:].astype(float))
            # select probabilty of belonging to "Survived = 1"
            test_predictions = probability_array[:,1] 
            full_test_predictions.append(test_predictions)
        
        test_predictions = (full_test_predictions[0]*3 + full_test_predictions[1]*1) / 4 
        #test_predictions = (full_test_predictions[0]*2 + full_test_predictions[1]*1 + full_test_predictions[2]*1) / 4 
        test_predictions[test_predictions <= .5] = 0
        test_predictions[test_predictions > .5] = 1
        predictions.append(test_predictions)    

    # concatenate the three predicted test folders
    predictions = numpy.concatenate(predictions, axis=0)

    # Compute accuracy by comparing to the training data.
    accuracy = sum(predictions[predictions == train_target]) / len(predictions)
    print("Ensemble scores: "+str(accuracy))

def perform_ensemble(algorithms, train_set, train_target, test_set):
    total_predictions = []
    for algorithm, predictor in algorithms:

        algorithm.fit(train_set[predictor], train_target)
        prediction = algorithm.predict_proba(test_set[predictor].astype(float))[:,1]
        total_predictions.append(prediction)

    # gradient supposedly generates better predictions, so weight it higher
    predictions = ((total_predictions[0] * 3 ) + (total_predictions[1] * 1) )/ 4
    #predictions = ((total_predictions[0] * 2 ) + (total_predictions[1] * 1) + (total_predictions[2]*1) )/ 4

    predictions[predictions <= .5] = 0
    predictions[predictions > .5] = 1
    predictions = predictions.astype(int)
    return predictions

# util functions
def print_info(dataframe):
    print(dataframe.describe())
    print(dataframe.shape)

def generate_submission(dataframe, predictions):
    submission = pandas.DataFrame({
        "PassengerId": dataframe["PassengerId"],
        "Survived": predictions
    })
    submission.to_csv("kaggle.csv", index=False)

def feature_selection(dataframe, predictions):
    selector = SelectKBest(f_classif, k=5)
    selector.fit(dataframe[predictors], predictions)

    # Get the raw p-values for each feature, and transform from p-values into scores
    scores = numpy.log10(selector.pvalues_)
    
    plt.bar(range(len(predictors)), scores)
    plt.xticks(range(len(predictors)), predictors, rotation='vertical')
    plt.show()
    
def titanic_clean_data(dataframe):


    # generating new features
    dataframe["FamilySize"] = dataframe["SibSp"] + dataframe["Parch"]
    dataframe["Title"] = dataframe["Name"].apply(get_title)
    family_ids = dataframe.apply(get_family_id, axis=1)
    family_ids[dataframe["FamilySize"] < 3] = -1
    dataframe["FamilyId"] = family_ids
    
    # discretize family size (small families are more likely to survived)
    dataframe.loc[dataframe["FamilySize"] <= 1, "FamilySize"] = -1
    dataframe.loc[dataframe["FamilySize"] > 4, "FamilySize"] = 0
    dataframe.loc[dataframe["FamilySize"] > 0, "FamilySize"] = 1
    
    # prototype, don't use this yet
    def fill_missing_age(passenger):
        title, age, Id = passenger
        if numpy.isnan(age):
            # Masters receive age 2
            if title == 4:
                return 6 
            # Misters receive age 30
            #if title == 1:
            #    return 28 
            # Miss receive age 21
            #if title == 2:
            #    return 8 
            #if title == 3:
            #    return 36
            # The rest receives age 20
            else:
                return age 
        else:
            return age

    # fill mising values
    #dataframe["Age"] = dataframe["Age"].dropna()
    #dataframe["Age"] = dataframe[["Title", "Age", "PassengerId"]].apply(fill_missing_age, axis=1)
    #dataframe["Age"] = dataframe["Age"].astype(int)
    dataframe["Age"] = dataframe["Age"].fillna(dataframe["Age"].median())
    dataframe["Fare"] = dataframe["Fare"].fillna(dataframe["Fare"].median())
    dataframe["Embarked"] = dataframe["Embarked"].fillna("C")

    #dataframe["Fare"] = preprocessing.scale(dataframe["Fare"])[0]

    def get_cabin(passenger):
        cabin, age = passenger
        try:
            if numpy.isnan(cabin):
                return 8
        except:
            if cabin.startswith("A"):
                return 1
            elif cabin.startswith("B"):
                return 2
            elif cabin.startswith("C"):
                return 3
            elif cabin.startswith("D"):
                return 4
            elif cabin.startswith("E"):
                return 5
            elif cabin.startswith("F"):
                return 6
            elif cabin.startswith("G"):
                return 7
            else:
                return 8 

    dataframe["Cabin"] = dataframe[["Cabin", "Age"]].apply(get_cabin, axis=1)


    # change non numeric columns to numeric
    dataframe.loc[dataframe["Sex"] == "male", "Sex"] = 0
    dataframe.loc[dataframe["Sex"] == "female", "Sex"] = 1
    dataframe.loc[dataframe["Embarked"] == "S", "Embarked"] = 0
    dataframe.loc[dataframe["Embarked"] == "C", "Embarked"] = 1
    dataframe.loc[dataframe["Embarked"] == "Q", "Embarked"] = 2

    def get_type_person(passenger):
        age, sex, kids, title = passenger
        if age < 16:
            return 3
        else:
            return sex
    
    def get_mother(passenger):
        age, sex, kids, title = passenger
    
        if age > 18 and sex == 1 and kids > 0 and title != 2:
            return 1
        else:
            return 0
    
    dataframe["Mother"] = dataframe[['Age', 'Sex', 'Parch', 'Title']].apply(get_mother, axis=1)
    #mothers = dataframe[(dataframe["Sex"] == 1) & (dataframe["Age"] > 18) & (dataframe["Parch"] > 0) & (dataframe["Title"] != 2)]
    #print(mothers)
    
    # we want to separate people between women - men - children
    dataframe["Person"] = dataframe[['Age', 'Sex', "Parch", "Title"]].apply(get_type_person, axis=1)
    # we can now drop sex column and use Person column instead
    dataframe.drop(['Sex'], axis=1, inplace = True)



    #print("Median of All Ages:")
    #print(dataframe["Age"].median())
    #print("Median of Ages of Title 3:")
    #print(dataframe.loc[dataframe["Title"] == 1]["Age"].median())
    
    # we assume that generally, if cabin info is present, the person survived
    #dataframe["Cabin"] = dataframe["Cabin"].fillna(0)
    #dataframe.loc[dataframe["Cabin"] != 0, "Cabin"] = 1

    # drop unnecesesary columns, won't be helpful in analysis and prediction
    dataframe = dataframe.drop(['Name', 'Ticket'], axis=1)
    

# read csv
titanic = pandas.read_csv("train.csv")
test = pandas.read_csv("test.csv")


titanic_clean_data(titanic)
titanic_clean_data(test)

titanic.to_csv("train_master_age.csv", index=False)

predictors = ["Pclass", "Person", "Title","Fare", "Embarked", "FamilyId"]

algorithms = [
    [GradientBoostingClassifier(random_state=1, n_estimators=35, max_depth=3), ["Pclass", "Person", "Title","Fare", "Embarked", "FamilyId"]]
    ,[SVC(probability=True), ["Pclass", "Person", "Title","Fare", "Embarked", "FamilyId"]]
    #,[RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=3), ["Pclass", "Person", "Age", "Fare", "FamilySize", "Title", "FamilyId", "Embarked"]]
    #,[LogisticRegression(random_state=1), ["Pclass", "Person", "Fare", "Title"]]
]

#predictions = perform_logistic_regression(titanic, titanic["Survived"], test)
#predictions = perform_random_forest(titanic, titanic["Survived"], test)
#predictions = perform_gradient_boosting(titanic, titanic["Survived"], test)
#predictions = perform_SVM(titanic, titanic["Survived"], test)
score_ensemble(algorithms, titanic, titanic["Survived"])

#feature_selection(titanic[predictors], titanic["Survived"])
predictions = perform_ensemble(algorithms, titanic, titanic["Survived"], test)
generate_submission(test, predictions)
