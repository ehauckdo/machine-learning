#! /usr/bin/env python

import pandas
import numpy
import re
import operator
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from Tools.estimators import feature_selection 
from Tools.estimators import perform_ensemble 
from Tools.estimators import score_ensemble 
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

# feature generation functions
def get_title(name):
    title_mapping = {"Mr": 1, "Miss": 2, "Mlle": 2, "Ms": 2, "Mrs": 3, "Mme": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 7, "Don": 9, "Lady": 10, "Countess": 10, "Jonkheer": 10, "Sir": 9, "Capt": 7, "Ms": 2, "Dona": 10}
    title_search = re.search('([A-Za-z]+)\.', name)
    if title_search:
        return title_mapping[title_search.group(1)]
    return ""

family_id_mapping = {}
def get_family_id(row):
    last_name = row["Name"].split(",")[0]
    family_id = "{0}{1}".format(last_name, row["FamilySize"])
    if family_id not in family_id_mapping:
        if len(family_id_mapping) == 0:
            current_id = 1
        else:
            current_id = (max(family_id_mapping.items(), key=operator.itemgetter(1))[1] + 1)
        family_id_mapping[family_id] = current_id
    return family_id_mapping[family_id]

# util functions
def print_info(dataframe):
    print(dataframe.describe())
    print(dataframe.shape)

def generate_submission(dataframe, predictions):
    submission = pandas.DataFrame({
        "PassengerId": dataframe["PassengerId"],
        "Survived": predictions
    })
    submission.to_csv("kaggle.csv", index=False)

def titanic_clean_data(dataframe):

    # generating new features
    dataframe["FamilySize"] = dataframe["SibSp"] + dataframe["Parch"]
    dataframe["Title"] = dataframe["Name"].apply(get_title)
    family_ids = dataframe.apply(get_family_id, axis=1)
    family_ids[dataframe["FamilySize"] < 3] = -1
    dataframe["FamilyId"] = family_ids
    
    # discretize family size (small families are more likely to survived)
    dataframe.loc[dataframe["FamilySize"] <= 1, "FamilySize"] = -1
    dataframe.loc[dataframe["FamilySize"] > 4, "FamilySize"] = 0
    dataframe.loc[dataframe["FamilySize"] > 0, "FamilySize"] = 1
    
    # fill mising values with averages or medians from titles
    # doesn't give a better result than the median
    #dataframe["Age"] = dataframe[["Title", "Age", "PassengerId"]].apply(fill_missing_age, axis=1)
    #dataframe["Age"] = dataframe["Age"].astype(int)
    #def fill_missing_age(passenger):
    #    title, age, Id = passenger
    #    if numpy.isnan(age):
    #        # Masters receive age 2
    #        if title == 4:
    #            return 6 
    #        else:
    #            return age 
    #    else:
    #        return age

    # fill empty values
    dataframe["Age"] = dataframe["Age"].fillna(dataframe["Age"].median())
    dataframe["Fare"] = dataframe["Fare"].fillna(dataframe["Fare"].median())
    dataframe["Embarked"] = dataframe["Embarked"].fillna("C")

    # discretize cabin values
    # doesn't give a better result using this feature
    #dataframe["Cabin"] = dataframe[["Cabin", "Age"]].apply(get_cabin, axis=1)
    #def get_cabin(passenger):
    #    cabin, age = passenger
    #    try:
    #        if numpy.isnan(cabin):
    #            return 8
    #    except:
    #        if   cabin.startswith("A"): return 1
    #        elif cabin.startswith("B"): return 2
    #        elif cabin.startswith("C"): return 3
    #        elif cabin.startswith("D"): return 4
    #        elif cabin.startswith("E"): return 5
    #        elif cabin.startswith("F"): return 6
    #        elif cabin.startswith("G"): return 7
    #        else: return 8 

    # change non numeric columns to numeric
    dataframe.loc[dataframe["Sex"] == "male", "Sex"] = 0
    dataframe.loc[dataframe["Sex"] == "female", "Sex"] = 1
    dataframe.loc[dataframe["Embarked"] == "S", "Embarked"] = 0
    dataframe.loc[dataframe["Embarked"] == "C", "Embarked"] = 1
    dataframe.loc[dataframe["Embarked"] == "Q", "Embarked"] = 2

    # we want to separate people between women - men - children
    def get_type_person(passenger):
        age, sex = passenger
        if age < 16: return 3
        else: return sex
    
    dataframe["Person"] = dataframe[['Age', 'Sex']].apply(get_type_person, axis=1)
    
    # we want to know who is a mother and who is not
    # doesn't give a beter result using this feature
    #dataframe["Mother"] = dataframe[['Age', 'Sex', 'Parch', 'Title']].apply(get_mother, axis=1)
    #def get_mother(passenger):
    #    age, sex, kids, title = passenger
    # 
    #    if age > 18 and sex == 1 and kids > 0 and title != 2:
    #        return 1
    #    else: return 0
    #

    # scaling seems interesting but don't seem to yield good results
    # for tree based methods
    #minmax_scaler = MinMaxScaler()
    #std_scaler = StandardScaler()
    #dataframe["Age"] = minmax_scaler.fit_transform(dataframe["Age"])
    #dataframe["Fare"] = minmax_scaler.fit_transform(dataframe["Fare"])
    #dataframe["Age"] = std_scaler.fit_transform(dataframe["Age"])
    #dataframe["Fare"] = std_scaler.fit_transform(dataframe["Fare"])

# read csv
titanic = pandas.read_csv("train.csv")
test = pandas.read_csv("test.csv")

titanic_clean_data(titanic)
titanic_clean_data(test)

titanic.to_csv("train_master_age.csv", index=False)

predictors = ["Pclass", "Person", "Title","Fare", "Embarked", "FamilyId", "Age", "FamilySize"]

algorithms = []
algorithms.append([GradientBoostingClassifier(random_state=1, n_estimators=35, max_depth=3), ["Pclass", "Person", "Title", "Fare", "Embarked", "FamilyId", "FamilySize"]])
algorithms.append([RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=3), ["Pclass", "Person", "Title", "Fare", "Embarked", "FamilyId", "FamilySize"]])
#algorithms.append([SVC(probability=True), ["Pclass", "Person", "Title","Fare", "Embarked", "FamilyId", "FamilySize"]])
#algorithms.append([LogisticRegression(random_state=1), ["Pclass", "Person", "Fare", "Title"]]) 

score_ensemble(algorithms, titanic, titanic["Survived"])

#feature_selection(titanic[predictors], titanic["Survived"])
predictions = perform_ensemble(algorithms, titanic, titanic["Survived"], test)
generate_submission(test, predictions)
